{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","API_URL","getMovie","query","a","fetch","res","json","Response","Error","FindMovie","onAddMovie","useState","setQuery","newMovie","setNewMovie","requestError","setRequestError","isLoading","setIsLoading","handleChangeQuery","useCallback","event","target","value","handleAddMovie","handleSirchMovie","preventDefault","movieData","pictureUrl","Poster","Title","Plot","imdbID","onSubmit","htmlFor","type","id","placeholder","onChange","classNames","disabled","onClick","App","setMovies","find","moveis","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cfb64ba0.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst key = '624a3b14';\nconst API_URL = `https://www.omdbapi.com/?apikey=${key}`;\n\nexport async function getMovie(\n  query: string,\n): Promise<MovieData | ResponseError> {\n  try {\n    const res = await fetch(`${API_URL}&t=${query}`);\n\n    return await res.json();\n  } catch {\n    return ({\n      Response: 'False',\n      Error: 'unexpected error',\n    });\n  }\n}\n","import React, { useCallback, useState } from 'react';\nimport classNames from 'classnames';\nimport './FindMovie.scss';\n\nimport { getMovie } from '../../api';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\n\nconst defaultPicture = (\n  'https://via.placeholder.com/360x270.png?text=no%20preview'\n);\n\ntype Props = {\n  onAddMovie: (newMovie: Movie) => void;\n};\n\nexport const FindMovie: React.FC<Props> = ({ onAddMovie }) => {\n  const [query, setQuery] = useState('');\n  const [newMovie, setNewMovie] = useState<Movie | null>(null);\n  const [requestError, setRequestError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleChangeQuery = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setQuery(event.target.value);\n      setRequestError(false);\n    },\n    [],\n  );\n\n  const handleAddMovie = useCallback(\n    () => {\n      if (newMovie) {\n        onAddMovie(newMovie);\n      }\n\n      setQuery('');\n      setNewMovie(null);\n    },\n    [newMovie],\n  );\n\n  const handleSirchMovie = useCallback(\n    async (event: React.FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      setIsLoading(true);\n\n      const movieData = await getMovie(query);\n\n      if (movieData.Response === 'True') {\n        setRequestError(false);\n        const pictureUrl = movieData.Poster === 'N/A'\n          ? defaultPicture\n          : movieData.Poster;\n\n        setNewMovie({\n          title: movieData.Title,\n          description: movieData.Plot,\n          imgUrl: pictureUrl,\n          imdbUrl: `https://www.imdb.com/title/${movieData.imdbID}`,\n          imdbId: movieData.imdbID,\n        });\n      }\n\n      if (movieData.Response === 'False') {\n        setRequestError(true);\n      }\n\n      setIsLoading(false);\n    },\n    [query],\n  );\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={handleSirchMovie}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={query}\n              onChange={handleChangeQuery}\n            />\n          </div>\n\n          {requestError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames(\n                'button',\n                'is-light',\n                { 'is-loading': isLoading },\n              )}\n              disabled={!query}\n            >\n              {newMovie ? 'Search again' : 'Find a movie'}\n            </button>\n          </div>\n\n          <div className=\"control\">\n            {newMovie && (\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleAddMovie}\n              >\n                Add to the list\n              </button>\n            )}\n          </div>\n        </div>\n      </form>\n\n      {newMovie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n\n          <MovieCard movie={newMovie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const handleAddMovie = (newMovie: Movie) => {\n    if (!movies.find(movie => movie.imdbId === newMovie.imdbId)) {\n      setMovies((moveis) => [...moveis, newMovie]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie onAddMovie={handleAddMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}